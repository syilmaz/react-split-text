{"version":3,"file":"react-split-text.cjs.production.min.js","sources":["../src/components/Wrappers.tsx","../src/components/SplitTextInner.tsx","../src/components/SplitText.tsx","../src/utils.ts"],"sourcesContent":["import React from 'react';\r\n\r\nexport interface LineWrapperProp<T = any> {\r\n  /**\r\n   * The current index of the line.\r\n   */\r\n  lineIndex: number;\r\n  /**\r\n   * The total number of lines.\r\n   */\r\n   totalLines: number;\r\n  /**\r\n   * Extra props forwarded from SplitText.\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const LineWrapper: React.FC<LineWrapperProp> = ({ children }) => (\r\n  <div>{children}</div>\r\n);\r\n\r\nexport interface WordWrapperProp<T = any> {\r\n  /**\r\n   * The current line index where the word wrapper lives.\r\n   */\r\n  lineIndex: number;\r\n  /**\r\n   * The total number of lines.\r\n   */\r\n   totalLines: number;\r\n  /**\r\n   * The current index of the word.\r\n   */\r\n  wordIndex: number;\r\n  /**\r\n   * The total number of words.\r\n   */\r\n   totalWords: number;\r\n  /**\r\n   * The current index of the total wrapped words inside <SplitText />.\r\n   */\r\n  countIndex: number;\r\n  /**\r\n   * Extra props forwarded from SplitText.\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const WordWrapper: React.FC<WordWrapperProp> = ({ children }) => (\r\n  <span style={{ whiteSpace: 'pre' }}>{children}</span>\r\n);\r\n\r\nexport interface LetterWrapperProp<T = any> {\r\n  /**\r\n   * The current line index where the letter wrapper lives.\r\n   */\r\n  lineIndex: number;\r\n  /**\r\n   * The total number of lines.\r\n   */\r\n   totalLines: number;\r\n  /**\r\n   * The current word index where the letter wrapper lives.\r\n   */\r\n  wordIndex: number;\r\n  /**\r\n   * The total number of words.\r\n   */\r\n   totalWords: number;\r\n  /**\r\n   * The current index of the letter.\r\n   */\r\n  letterIndex: number;\r\n  /**\r\n   * The total number of letters.\r\n   */\r\n   totalLetters: number;\r\n  /**\r\n   * The current index of the total wrapped letters inside <SplitText />.\r\n   */\r\n  countIndex: number;\r\n  /**\r\n   * Extra props forwarded from SplitText.\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const LetterWrapper: React.FC<LetterWrapperProp> = ({ children }) => (\r\n  <span>{children}</span>\r\n);\r\n","import React, {\r\n  useRef,\r\n  useLayoutEffect,\r\n  useEffect,\r\n  useState,\r\n  memo,\r\n  FC,\r\n  forwardRef,\r\n  MutableRefObject,\r\n} from 'react';\r\nimport { LineWrapper, WordWrapper, LetterWrapper } from './Wrappers';\r\nimport { SplitTextProps } from './SplitText';\r\n\r\nconst DefaultLineWrapper = memo(LineWrapper);\r\nconst DefaultWordWrapper = memo(WordWrapper);\r\nconst DefaultLetterWrapper = memo(LetterWrapper);\r\n\r\nexport const SplitTextInner: FC<SplitTextProps> = forwardRef(\r\n  function SplitTextInner(\r\n    {\r\n      children,\r\n      className,\r\n      style,\r\n      LineWrapper = DefaultLineWrapper,\r\n      WordWrapper = DefaultWordWrapper,\r\n      LetterWrapper = DefaultLetterWrapper,\r\n      extraProps,\r\n    },\r\n    ref\r\n  ) {\r\n    let text = '';\r\n    React.Children.map(children, (child) => {\r\n      if (typeof child === 'string' || typeof child === 'number') {\r\n        text += String(child);\r\n      } else {\r\n        throw new Error(`SplitText expect a text as children`);\r\n      }\r\n    });\r\n\r\n    const elRef = useRef<HTMLDivElement | null>(null);\r\n    const [lines, setLines] = useState<string[]>([]);\r\n    const maxCharPerLine = useRef<number>(0);\r\n\r\n    function makeLines() {\r\n      const el = elRef.current;\r\n      if (!el) return;\r\n\r\n      if (lines.length > 0) {\r\n        return refreshLines(lines, text);\r\n      }\r\n\r\n      let lastY;\r\n      let newLines: string[] = [];\r\n      let words: string[] = [];\r\n      for (const child of Array.from(el.children)) {\r\n        const y = child.getBoundingClientRect().top;\r\n        if (lastY == null) lastY = y;\r\n        if (y !== lastY) {\r\n          newLines.push(words.join(' '));\r\n          words = [];\r\n        }\r\n        lastY = y;\r\n        words.push((child.textContent || '').trim());\r\n      }\r\n      newLines.push(words.join(' '));\r\n      setLines(newLines);\r\n    }\r\n\r\n    function refreshLines(previous: string[], newText: string) {\r\n      const charPerLine =\r\n        maxCharPerLine.current ||\r\n        previous.map((line) => line.length).sort((a, b) => b - a)[0];\r\n      const lines: string[] = [];\r\n      let line: string = '';\r\n      let charCount = 0;\r\n      const words = newText.split(' ');\r\n      for (const [i, word] of words.entries()) {\r\n        charCount += word.length + 1;\r\n        if (charCount > charPerLine + 1) {\r\n          lines.push(line);\r\n          line = '';\r\n          charCount = 0;\r\n        }\r\n        line += word.trim() + ' ';\r\n      }\r\n      lines.push(line);\r\n      setLines(lines.map((line) => line.trim()));\r\n      if (charPerLine > maxCharPerLine.current) {\r\n        maxCharPerLine.current = charPerLine;\r\n      }\r\n    }\r\n\r\n    useLayoutEffect(() => makeLines(), [text]);\r\n\r\n    let wordCount = 0;\r\n    let letterCount = 0;\r\n\r\n    if (lines.length) {\r\n      const totalLines = lines.length;\r\n      const totalWords = lines.reduce( (count, line) => count + line.split(' ').length, 0 );\r\n      const totalChars = lines.reduce((count, line) => {\r\n        let words = line.split(' ');\r\n        words = words.map((w, i) =>\r\n          i === words.length - 1 ? w : w + ' '\r\n        );\r\n        let charCount = words.reduce((total, word) => total + word.length, 0);\r\n        return count + charCount;\r\n      }, 0);\r\n\r\n      console.log(\r\n        `Line Total: ${lines.length}, Words Total: ${totalWords}, Letter Total: ${totalChars}`\r\n      );\r\n\r\n      return (\r\n        <div\r\n          className={className}\r\n          ref={(div) => {\r\n            elRef.current = div;\r\n            if (typeof ref == 'function') {\r\n              ref(div);\r\n            } else if (ref) {\r\n              (ref as MutableRefObject<HTMLDivElement | null>).current = div;\r\n            }\r\n          }}\r\n          style={style}\r\n        >\r\n          {lines.map((line, i) => {\r\n            let words = line.split(' ');\r\n            words = words.map((word, i) =>\r\n              i === words.length - 1 ? word : word + ' '\r\n            );\r\n            return (\r\n              <LineWrapper\r\n                key={i}\r\n                lineIndex={i}\r\n                totalLines={totalLines}\r\n                extraProps={extraProps}\r\n              >\r\n                {words.map((word, j) => {\r\n                  const letters = word.split('');\r\n                  return (\r\n                    <WordWrapper\r\n                      key={j}\r\n                      lineIndex={i}\r\n                      totalLines={totalLines}\r\n                      wordIndex={j}\r\n                      totalWords={totalWords}\r\n                      countIndex={wordCount++}\r\n                      extraProps={extraProps}\r\n                    >\r\n                      {letters.map((char, k) => (\r\n                        <LetterWrapper\r\n                          key={k}\r\n                          lineIndex={i}\r\n                          totalLines={totalLines}\r\n                          wordIndex={j}\r\n                          totalWords={totalWords}\r\n                          letterIndex={k}\r\n                          totalLetters={totalChars}\r\n                          countIndex={letterCount++}\r\n                          extraProps={extraProps}\r\n                        >\r\n                          {char}\r\n                        </LetterWrapper>\r\n                      ))}\r\n                    </WordWrapper>\r\n                  );\r\n                })}\r\n              </LineWrapper>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={className} ref={elRef} style={style}>\r\n          {text.split(' ').map((word, i) => (\r\n            <span key={i}>{word} </span>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\nreturn lines.length ? (\r\n  <div\r\n    className={className}\r\n    ref={div => {\r\n      elRef.current = div;\r\n      if (typeof ref == 'function') {\r\n        ref(div);\r\n      } else if (ref) {\r\n        (ref as MutableRefObject<HTMLDivElement | null>).current = div;\r\n      }\r\n    }}\r\n    style={style}\r\n  >\r\n    {lines.map((line, i) => {\r\n      let words = line.split(' ');\r\n      words = words.map((word, i) =>\r\n        i === words.length - 1 ? word : word + ' '\r\n      );\r\n      return (\r\n        <LineWrapper key={i} lineIndex={i} totalLines={totalLines.current} extraProps={extraProps}>\r\n          {words.map((word, j) => {\r\n            const letters = word.split('');\r\n            return (\r\n              <WordWrapper\r\n                key={j}\r\n                lineIndex={i}\r\n                totalLines={totalLines.current}\r\n                wordIndex={j}\r\n                totalWords={totalWords.current}\r\n                countIndex={wordCount++}\r\n                extraProps={extraProps}\r\n              >\r\n                {letters.map((char, k) => (\r\n                  <LetterWrapper\r\n                    key={k}\r\n                    lineIndex={i}\r\n                    totalLines={totalLines.current}\r\n                    wordIndex={j}\r\n                    totalWords={totalWords.current}\r\n                    letterIndex={k}\r\n                    totalLetters={totalChars.current}\r\n                    countIndex={letterCount++}\r\n                    extraProps={extraProps}\r\n                  >\r\n                    {char}\r\n                  </LetterWrapper>\r\n                ))}\r\n              </WordWrapper>\r\n            );\r\n          })}\r\n        </LineWrapper>\r\n      );\r\n    })}\r\n  </div>\r\n) : (\r\n  <div className={className} ref={elRef} style={style}>\r\n    {text.split(' ').map((word, i) => (\r\n      <span key={i}>{word} </span>\r\n    ))}\r\n  </div>\r\n);\r\n\r\n*/\r\n","import React, {\r\n  useState,\r\n  ComponentType,\r\n  CSSProperties,\r\n  FC,\r\n  useEffect,\r\n  forwardRef,\r\n  useCallback,\r\n} from 'react';\r\nimport {\r\n  LineWrapperProp,\r\n  WordWrapperProp,\r\n  LetterWrapperProp,\r\n} from './Wrappers';\r\nimport { SplitTextInner } from './SplitTextInner';\r\nimport { debounce } from '../utils';\r\n\r\nexport interface SplitTextProps<T = any> {\r\n  /**\r\n   * className to forward to the container.\r\n   * @type string\r\n   */\r\n  className?: string;\r\n  /**\r\n   * A style object to forward to the container.\r\n   * @type CSSProperties\r\n   */\r\n  style?: CSSProperties;\r\n  /**\r\n   * A React ref to forward to the container.\r\n   * @type A React ref\r\n   */\r\n  ref?: ((instance: unknown) => void) | React.MutableRefObject<unknown> | null;\r\n  /**\r\n   * A custom component to wrap each split line.\r\n   * @type ComponentType<LineWrapperProp>\r\n   */\r\n  LineWrapper?: ComponentType<LineWrapperProp>;\r\n  /**\r\n   * A custom component to wrap each split word.\r\n   * @type ComponentType<WordWrapperProp>\r\n   */\r\n  WordWrapper?: ComponentType<WordWrapperProp>;\r\n  /**\r\n   * A custom component to wrap each split letter.\r\n   * @type ComponentType<LetterWrapperProp>\r\n   */\r\n  LetterWrapper?: ComponentType<LetterWrapperProp>;\r\n  /**\r\n   * An extra value that will be forwarded to each wrappers.\r\n   * @type T = any\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const SplitText: FC<SplitTextProps> = forwardRef(function SplitText(\r\n  { children, ...props },\r\n  ref\r\n) {\r\n  const [key, setKey] = useState(0);\r\n\r\n  const onResize = debounce(() => setKey(v => v + 1), 300);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', onResize);\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, []);\r\n\r\n  return (\r\n    <SplitTextInner key={key} {...props} ref={ref}>\r\n      {children}\r\n    </SplitTextInner>\r\n  );\r\n});\r\n","export function debounce(callback: Function, wait: number, immediate = false) {\r\n  let timeout: NodeJS.Timeout;\r\n\r\n  return function(this: any, ...args: any[]) {\r\n    const callNow = immediate && !timeout;\r\n    const next = () => callback.apply(this, args);\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(next, wait);\r\n\r\n    if (callNow) {\r\n      next();\r\n    }\r\n  };\r\n}\r\n"],"names":["LineWrapper","React","children","WordWrapper","style","whiteSpace","LetterWrapper","DefaultLineWrapper","memo","DefaultWordWrapper","DefaultLetterWrapper","SplitTextInner","forwardRef","ref","className","extraProps","text","Children","map","child","Error","String","elRef","useRef","useState","lines","setLines","maxCharPerLine","useLayoutEffect","el","current","length","previous","newText","charPerLine","line","sort","a","b","charCount","split","entries","i","word","push","trim","refreshLines","lastY","newLines","words","Array","from","y","getBoundingClientRect","top","join","textContent","makeLines","wordCount","letterCount","totalLines","totalWords","reduce","count","totalChars","w","total","console","log","div","key","lineIndex","j","letters","wordIndex","countIndex","char","k","letterIndex","totalLetters","SplitText","callback","immediate","timeout","props","setKey","onResize","v","args","callNow","next","apply","_this","clearTimeout","setTimeout","useEffect","window","addEventListener","removeEventListener"],"mappings":"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"}