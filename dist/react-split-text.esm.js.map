{"version":3,"file":"react-split-text.esm.js","sources":["../src/components/Wrappers.tsx","../src/components/SplitTextInner.tsx","../src/utils.ts","../src/components/SplitText.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport interface LineWrapperProp<T = any> {\r\n  /**\r\n   * The current index of the line.\r\n   */\r\n  lineIndex: number;\r\n  /**\r\n   * The total number of lines.\r\n   */\r\n   totalLines: number;\r\n  /**\r\n   * Extra props forwarded from SplitText.\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const LineWrapper: React.FC<LineWrapperProp> = ({ children }) => (\r\n  <div>{children}</div>\r\n);\r\n\r\nexport interface WordWrapperProp<T = any> {\r\n  /**\r\n   * The current line index where the word wrapper lives.\r\n   */\r\n  lineIndex: number;\r\n  /**\r\n   * The total number of lines.\r\n   */\r\n   totalLines: number;\r\n  /**\r\n   * The current index of the word.\r\n   */\r\n  wordIndex: number;\r\n  /**\r\n   * The total number of words.\r\n   */\r\n   totalWords: number;\r\n  /**\r\n   * The current index of the total wrapped words inside <SplitText />.\r\n   */\r\n  countIndex: number;\r\n  /**\r\n   * Extra props forwarded from SplitText.\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const WordWrapper: React.FC<WordWrapperProp> = ({ children }) => (\r\n  <span style={{ whiteSpace: 'pre' }}>{children}</span>\r\n);\r\n\r\nexport interface LetterWrapperProp<T = any> {\r\n  /**\r\n   * The current line index where the letter wrapper lives.\r\n   */\r\n  lineIndex: number;\r\n  /**\r\n   * The total number of lines.\r\n   */\r\n   totalLines: number;\r\n  /**\r\n   * The current word index where the letter wrapper lives.\r\n   */\r\n  wordIndex: number;\r\n  /**\r\n   * The total number of words.\r\n   */\r\n   totalWords: number;\r\n  /**\r\n   * The current index of the letter.\r\n   */\r\n  letterIndex: number;\r\n  /**\r\n   * The total number of letters.\r\n   */\r\n   totalLetters: number;\r\n  /**\r\n   * The current index of the total wrapped letters inside <SplitText />.\r\n   */\r\n  countIndex: number;\r\n  /**\r\n   * Extra props forwarded from SplitText.\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const LetterWrapper: React.FC<LetterWrapperProp> = ({ children }) => (\r\n  <span>{children}</span>\r\n);\r\n","import React, {\r\n  useRef,\r\n  useLayoutEffect,\r\n  useEffect,\r\n  useState,\r\n  memo,\r\n  FC,\r\n  forwardRef,\r\n  MutableRefObject,\r\n} from 'react';\r\nimport { LineWrapper, WordWrapper, LetterWrapper } from './Wrappers';\r\nimport { SplitTextProps } from './SplitText';\r\n\r\nconst DefaultLineWrapper = memo(LineWrapper);\r\nconst DefaultWordWrapper = memo(WordWrapper);\r\nconst DefaultLetterWrapper = memo(LetterWrapper);\r\n\r\nexport const SplitTextInner: FC<SplitTextProps> = forwardRef(\r\n  function SplitTextInner(\r\n    {\r\n      children,\r\n      className,\r\n      style,\r\n      LineWrapper = DefaultLineWrapper,\r\n      WordWrapper = DefaultWordWrapper,\r\n      LetterWrapper = DefaultLetterWrapper,\r\n      extraProps,\r\n    },\r\n    ref\r\n  ) {\r\n    let text = '';\r\n    React.Children.map(children, (child) => {\r\n      if (typeof child === 'string' || typeof child === 'number') {\r\n        text += String(child);\r\n      } else {\r\n        throw new Error(`SplitText expect a text as children`);\r\n      }\r\n    });\r\n\r\n    const elRef = useRef<HTMLDivElement | null>(null);\r\n    const [lines, setLines] = useState<string[]>([]);\r\n    const maxCharPerLine = useRef<number>(0);\r\n\r\n    function makeLines() {\r\n      const el = elRef.current;\r\n      if (!el) return;\r\n\r\n      if (lines.length > 0) {\r\n        return refreshLines(lines, text);\r\n      }\r\n\r\n      let lastY;\r\n      let newLines: string[] = [];\r\n      let words: string[] = [];\r\n      for (const child of Array.from(el.children)) {\r\n        const y = child.getBoundingClientRect().top;\r\n        if (lastY == null) lastY = y;\r\n        if (y !== lastY) {\r\n          newLines.push(words.join(' '));\r\n          words = [];\r\n        }\r\n        lastY = y;\r\n        words.push((child.textContent || '').trim());\r\n      }\r\n      newLines.push(words.join(' '));\r\n      setLines(newLines);\r\n    }\r\n\r\n    function refreshLines(previous: string[], newText: string) {\r\n      const charPerLine =\r\n        maxCharPerLine.current ||\r\n        previous.map((line) => line.length).sort((a, b) => b - a)[0];\r\n      const lines: string[] = [];\r\n      let line: string = '';\r\n      let charCount = 0;\r\n      const words = newText.split(' ');\r\n      for (const [i, word] of words.entries()) {\r\n        charCount += word.length + 1;\r\n        if (charCount > charPerLine + 1) {\r\n          lines.push(line);\r\n          line = '';\r\n          charCount = 0;\r\n        }\r\n        line += word.trim() + ' ';\r\n      }\r\n      lines.push(line);\r\n      setLines(lines.map((line) => line.trim()));\r\n      if (charPerLine > maxCharPerLine.current) {\r\n        maxCharPerLine.current = charPerLine;\r\n      }\r\n    }\r\n\r\n    useLayoutEffect(() => makeLines(), [text]);\r\n\r\n    let wordCount = 0;\r\n    let letterCount = 0;\r\n\r\n    if (lines.length) {\r\n      const totalLines = lines.length;\r\n      const totalWords = lines.reduce( (count, line) => count + line.split(' ').length, 0 );\r\n      const totalChars = lines.reduce((count, line) => {\r\n        let words = line.split(' ');\r\n        words = words.map((w, i) =>\r\n          i === words.length - 1 ? w : w + ' '\r\n        );\r\n        let charCount = words.reduce((total, word) => total + word.length, 0);\r\n        return count + charCount;\r\n      }, 0);\r\n\r\n      console.log(\r\n        `Line Total: ${lines.length}, Words Total: ${totalWords}, Letter Total: ${totalChars}`\r\n      );\r\n\r\n      return (\r\n        <div\r\n          className={className}\r\n          ref={(div) => {\r\n            elRef.current = div;\r\n            if (typeof ref == 'function') {\r\n              ref(div);\r\n            } else if (ref) {\r\n              (ref as MutableRefObject<HTMLDivElement | null>).current = div;\r\n            }\r\n          }}\r\n          style={style}\r\n        >\r\n          {lines.map((line, i) => {\r\n            let words = line.split(' ');\r\n            words = words.map((word, i) =>\r\n              i === words.length - 1 ? word : word + ' '\r\n            );\r\n            return (\r\n              <LineWrapper\r\n                key={i}\r\n                lineIndex={i}\r\n                totalLines={totalLines}\r\n                extraProps={extraProps}\r\n              >\r\n                {words.map((word, j) => {\r\n                  const letters = word.split('');\r\n                  return (\r\n                    <WordWrapper\r\n                      key={j}\r\n                      lineIndex={i}\r\n                      totalLines={totalLines}\r\n                      wordIndex={j}\r\n                      totalWords={totalWords}\r\n                      countIndex={wordCount++}\r\n                      extraProps={extraProps}\r\n                    >\r\n                      {letters.map((char, k) => (\r\n                        <LetterWrapper\r\n                          key={k}\r\n                          lineIndex={i}\r\n                          totalLines={totalLines}\r\n                          wordIndex={j}\r\n                          totalWords={totalWords}\r\n                          letterIndex={k}\r\n                          totalLetters={totalChars}\r\n                          countIndex={letterCount++}\r\n                          extraProps={extraProps}\r\n                        >\r\n                          {char}\r\n                        </LetterWrapper>\r\n                      ))}\r\n                    </WordWrapper>\r\n                  );\r\n                })}\r\n              </LineWrapper>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={className} ref={elRef} style={style}>\r\n          {text.split(' ').map((word, i) => (\r\n            <span key={i}>{word} </span>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\nreturn lines.length ? (\r\n  <div\r\n    className={className}\r\n    ref={div => {\r\n      elRef.current = div;\r\n      if (typeof ref == 'function') {\r\n        ref(div);\r\n      } else if (ref) {\r\n        (ref as MutableRefObject<HTMLDivElement | null>).current = div;\r\n      }\r\n    }}\r\n    style={style}\r\n  >\r\n    {lines.map((line, i) => {\r\n      let words = line.split(' ');\r\n      words = words.map((word, i) =>\r\n        i === words.length - 1 ? word : word + ' '\r\n      );\r\n      return (\r\n        <LineWrapper key={i} lineIndex={i} totalLines={totalLines.current} extraProps={extraProps}>\r\n          {words.map((word, j) => {\r\n            const letters = word.split('');\r\n            return (\r\n              <WordWrapper\r\n                key={j}\r\n                lineIndex={i}\r\n                totalLines={totalLines.current}\r\n                wordIndex={j}\r\n                totalWords={totalWords.current}\r\n                countIndex={wordCount++}\r\n                extraProps={extraProps}\r\n              >\r\n                {letters.map((char, k) => (\r\n                  <LetterWrapper\r\n                    key={k}\r\n                    lineIndex={i}\r\n                    totalLines={totalLines.current}\r\n                    wordIndex={j}\r\n                    totalWords={totalWords.current}\r\n                    letterIndex={k}\r\n                    totalLetters={totalChars.current}\r\n                    countIndex={letterCount++}\r\n                    extraProps={extraProps}\r\n                  >\r\n                    {char}\r\n                  </LetterWrapper>\r\n                ))}\r\n              </WordWrapper>\r\n            );\r\n          })}\r\n        </LineWrapper>\r\n      );\r\n    })}\r\n  </div>\r\n) : (\r\n  <div className={className} ref={elRef} style={style}>\r\n    {text.split(' ').map((word, i) => (\r\n      <span key={i}>{word} </span>\r\n    ))}\r\n  </div>\r\n);\r\n\r\n*/\r\n","export function debounce(callback: Function, wait: number, immediate = false) {\r\n  let timeout: NodeJS.Timeout;\r\n\r\n  return function(this: any, ...args: any[]) {\r\n    const callNow = immediate && !timeout;\r\n    const next = () => callback.apply(this, args);\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(next, wait);\r\n\r\n    if (callNow) {\r\n      next();\r\n    }\r\n  };\r\n}\r\n","import React, {\r\n  useState,\r\n  ComponentType,\r\n  CSSProperties,\r\n  FC,\r\n  useEffect,\r\n  forwardRef,\r\n  useCallback,\r\n} from 'react';\r\nimport {\r\n  LineWrapperProp,\r\n  WordWrapperProp,\r\n  LetterWrapperProp,\r\n} from './Wrappers';\r\nimport { SplitTextInner } from './SplitTextInner';\r\nimport { debounce } from '../utils';\r\n\r\nexport interface SplitTextProps<T = any> {\r\n  /**\r\n   * className to forward to the container.\r\n   * @type string\r\n   */\r\n  className?: string;\r\n  /**\r\n   * A style object to forward to the container.\r\n   * @type CSSProperties\r\n   */\r\n  style?: CSSProperties;\r\n  /**\r\n   * A React ref to forward to the container.\r\n   * @type A React ref\r\n   */\r\n  ref?: ((instance: unknown) => void) | React.MutableRefObject<unknown> | null;\r\n  /**\r\n   * A custom component to wrap each split line.\r\n   * @type ComponentType<LineWrapperProp>\r\n   */\r\n  LineWrapper?: ComponentType<LineWrapperProp>;\r\n  /**\r\n   * A custom component to wrap each split word.\r\n   * @type ComponentType<WordWrapperProp>\r\n   */\r\n  WordWrapper?: ComponentType<WordWrapperProp>;\r\n  /**\r\n   * A custom component to wrap each split letter.\r\n   * @type ComponentType<LetterWrapperProp>\r\n   */\r\n  LetterWrapper?: ComponentType<LetterWrapperProp>;\r\n  /**\r\n   * An extra value that will be forwarded to each wrappers.\r\n   * @type T = any\r\n   */\r\n  extraProps?: T;\r\n}\r\n\r\nexport const SplitText: FC<SplitTextProps> = forwardRef(function SplitText(\r\n  { children, ...props },\r\n  ref\r\n) {\r\n  const [key, setKey] = useState(0);\r\n\r\n  const onResize = debounce(() => setKey(v => v + 1), 300);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', onResize);\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, []);\r\n\r\n  return (\r\n    <SplitTextInner key={key} {...props} ref={ref}>\r\n      {children}\r\n    </SplitTextInner>\r\n  );\r\n});\r\n"],"names":["LineWrapper","children","React","WordWrapper","style","whiteSpace","LetterWrapper","DefaultLineWrapper","memo","DefaultWordWrapper","DefaultLetterWrapper","SplitTextInner","forwardRef","ref","className","extraProps","text","Children","map","child","String","Error","elRef","useRef","useState","lines","setLines","maxCharPerLine","makeLines","el","current","length","refreshLines","lastY","newLines","words","Array","from","y","getBoundingClientRect","top","push","join","textContent","trim","previous","newText","charPerLine","line","sort","a","b","charCount","split","entries","i","word","useLayoutEffect","wordCount","letterCount","totalLines","totalWords","reduce","count","totalChars","w","total","console","log","div","key","lineIndex","j","letters","wordIndex","countIndex","char","k","letterIndex","totalLetters","debounce","callback","wait","immediate","timeout","args","callNow","next","apply","clearTimeout","setTimeout","SplitText","props","setKey","onResize","v","useEffect","window","addEventListener","removeEventListener"],"mappings":"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"}